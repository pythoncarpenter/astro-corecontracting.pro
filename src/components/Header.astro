---
const navItems = [
  { href: '/', text: 'Home' },
  { href: '/services', text: 'Services' },
  { href: '/portfolio', text: 'Portfolio' },
  { href: '/about', text: 'About' },
  { href: '/blog', text: 'Blog' },
  { href: '/contact', text: 'Contact' },
];
---

<header class="bg-white dark:bg-primary-800 shadow-md">
  <nav class="container mx-auto px-4 py-4">
    <div class="flex items-center justify-between">
      <a href="/" class="text-2xl font-display text-wood-dark dark:text-wood-light">
        Core Contracting
      </a>

      <div class="hidden md:flex items-center space-x-6">
        {navItems.map(item => (
          <a
            href={item.href}
            class:list={[
              "text-primary-600 dark:text-primary-300 hover:text-wood-dark dark:hover:text-wood-light transition-colors",
              { 
                'font-bold': Astro.url.pathname === item.href, 
                'hover:text-blue-700 dark:hover:text-blue-300': Astro.url.pathname !== item.href, 
                'active:text-blue-800 dark:active:text-blue-200': Astro.url.pathname !== item.href 
              }
            ]}
          >
            {item.text}
          </a>
        ))}
        <button
          id="scheme-toggle"
          class="p-2 rounded-full hover:bg-primary-100 dark:hover:bg-primary-700 transition-colors"
          aria-label="Toggle Light/Dark"
        >
          <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
          <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
        </button>
      </div>

      <button
        id="mobile-menu-button"
        class="md:hidden p-2 rounded-lg hover:bg-primary-100 dark:hover:bg-primary-700 active:bg-primary-200 dark:active:bg-primary-600"
        aria-label="Toggle menu"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>

    <div id="mobile-menu" class="hidden md:hidden mt-4 space-y-4 bg-primary-50 dark:bg-primary-800 p-4 rounded-lg">
      {navItems.map(item => (
        <a
          href={item.href}
          class:list={[
            "block py-2 text-primary-600 dark:text-primary-300 hover:text-wood-dark dark:hover:text-wood-light transition-colors",
            { 
              'font-bold': Astro.url.pathname === item.href, 
              'hover:text-blue-700 dark:hover:text-blue-300': Astro.url.pathname !== item.href, 
              'active:text-blue-800 dark:active:text-blue-200': Astro.url.pathname !== item.href 
            }
          ]}
        >
          {item.text}
        </a>
      ))}
    </div>
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const schemeToggleButton = document.getElementById('scheme-toggle');

    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    schemeToggleButton.addEventListener('click', () => {
      // Toggle the 'dark' class on the HTML element
      document.documentElement.classList.toggle('dark');

      // Update localStorage with the current theme
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('colorScheme', isDark ? 'dark' : 'light');

      // Update the Astro cookie
      Astro.cookies.set('colorScheme', isDark ? 'dark' : 'light');
    });
  });
</script>