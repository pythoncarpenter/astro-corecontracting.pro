---
export const prerender = false;

export const head = `
  <style>
    /* When in fullscreen mode, force images to cover the container */
    #carousel-wrapper.fullscreen img {
      object-fit: cover;
    }
  </style>
`;

import Layout from '../layouts/Layout.astro';

const topImages = [
  '/images/Top1.jpeg',
  '/images/Top2.jpeg',
  '/images/Top3.jpeg',
  '/images/Top4.jpeg',
  '/images/Top5.jpeg',
  '/images/Top6.jpeg',
  '/images/Top7.jpeg',
  '/images/Top8.jpeg',
  '/images/Top9.jpeg',
  '/images/Top10.jpeg',
];

const projectImages = [
  '/images/placeholder_1.jpeg',
  '/images/placeholder_2.jpeg',
  '/images/placeholder_3.jpeg',
  '/images/placeholder_4.jpeg',
  '/images/placeholder_5.jpeg',
  '/images/placeholder_6.jpeg',
];

// Using a dictionary (object) for the project titles
const projectTitles: Record<number, string> = {
  1: 'High-End Bathroom Uplift',
  2: 'Backyard Reno',
  3: 'Bathroom Maple Beams',
  4: 'Vertical Siding on Poolhouse',
  5: 'Apartment Fire-Door',
  6: 'Beachouse Stair Repair'
};
---
<Layout title="Portfolio - Core Contracting">
  <!-- Banner prompting device rotation with dismiss button -->
  <div id="rotate-banner" class="hidden fixed top-0 left-0 w-full bg-yellow-300 text-black p-3 z-[999] flex items-center justify-between">
    <span>Please rotate your device to landscape for the best experience.</span>
    <button id="dismiss-banner" class="text-black font-bold">X</button>
  </div>

  <!-- Main heading -->
  <h1 class="text-4xl font-display text-center mb-4">Our Portfolio</h1>

  <!-- Carousel Section -->
  <section id="carousel-wrapper" class="relative transition-all duration-300 ease-in-out">
    <div id="carousel-container" class="relative w-full h-[80vh] bg-black overflow-hidden">
      {topImages.map((image, index) => (
        <div
          class="absolute top-0 left-0 w-full h-full flex justify-center items-center transition-transform duration-300"
          style={`transform: translateX(${100 * index}%)`}
        >
          <img
            src={image}
            alt={`Slide ${index + 1}`}
            class="h-full w-auto object-contain"
          />
        </div>
      ))}
    </div>

    <!-- Arrow controls:
         • On mobile: arrows remain at the left/right sides (vertically centered)
         • On desktop: controls are grouped together at the center–bottom -->
    <div class="absolute top-1/2 left-0 right-0 flex justify-between items-center px-4 z-10
                md:bottom-4 md:left-1/2 md:top-auto md:transform md:-translate-x-1/2 md:px-0
                md:justify-center md:gap-4">
      <button
        id="carousel-prev"
        class="bg-gray-800 text-white text-base h-8 w-8 flex items-center justify-center rounded-full hover:bg-gray-900 transition-colors shadow"
        aria-label="Previous Slide"
      >
        &larr;
      </button>
      <span id="slide-number" class="hidden md:block text-md font-medium text-white">
        1 / {topImages.length}
      </span>
      <button
        id="carousel-next"
        class="bg-gray-800 text-white text-base h-8 w-8 flex items-center justify-center rounded-full hover:bg-gray-900 transition-colors shadow"
        aria-label="Next Slide"
      >
        &rarr;
      </button>
    </div>
  </section>

  <!-- Portfolio Cards Below the Carousel -->
  <div id="portfolio-cards" class="container mx-auto px-4 py-12 transition-all duration-300 ease-in-out">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {projectImages.map((imagePath, index) => (
        <div class="bg-white dark:bg-primary-800 rounded-lg shadow-lg overflow-hidden">
          <img
            src={imagePath}
            alt={`Project ${index + 1}`}
            class="w-full h-64 object-cover"
          />
          <div class="p-6">
            <!-- Remove the "Project {index + 1}" placeholder and use the real title -->
            <h2 class="text-2xl font-bold mb-2">{projectTitles[index + 1]}</h2>
            <button class="bg-wood-dark hover:bg-wood text-white px-4 py-2 rounded-lg transition-colors">
              View Project
            </button>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>

<!-- Vanilla JS for carousel and banner behavior -->
<script>
  let manuallyExited = false;
  let landscapeLocked = false;

  function preventScroll() {
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';
  }

  function allowScroll() {
    document.body.style.overflow = '';
    document.body.style.position = '';
    document.body.style.width = '';
  }

  function isMobilePortrait() {
    return window.matchMedia('(max-width: 767px)').matches &&
      (window.orientation === 0 || window.orientation === 180);
  }

  function isMobileLandscape() {
    return window.matchMedia('(max-width: 767px)').matches &&
      (window.orientation === 90 || window.orientation === -90);
  }

  function showBanner() {
    const banner = document.getElementById('rotate-banner');
    if (banner) banner.classList.remove('hidden');
  }

  function hideBanner() {
    const banner = document.getElementById('rotate-banner');
    if (banner) banner.classList.add('hidden');
  }

  function applyFullscreen() {
    const wrapper = document.getElementById('carousel-wrapper');
    const container = document.getElementById('carousel-container');
    if (!wrapper || !container) return;
    wrapper.style.backgroundColor = 'black';
    wrapper.style.position = 'fixed';
    wrapper.style.top = '0';
    wrapper.style.left = '0';
    wrapper.style.width = '100vw';
    wrapper.style.height = '100vh';
    wrapper.style.zIndex = '50';
    container.style.width = '100vw';
    container.style.height = '100vh';
    wrapper.classList.add('fullscreen'); // triggers object-fit: cover via CSS
    preventScroll();
  }

  function revertInline() {
    const wrapper = document.getElementById('carousel-wrapper');
    const container = document.getElementById('carousel-container');
    if (!wrapper || !container) return;
    wrapper.style.backgroundColor = '';
    wrapper.style.position = '';
    wrapper.style.top = '';
    wrapper.style.left = '';
    wrapper.style.width = '';
    wrapper.style.height = '';
    wrapper.style.zIndex = '';
    container.style.width = '';
    container.style.height = '';
    wrapper.classList.remove('fullscreen');
    allowScroll();
  }

  function updateLayout() {
    if (manuallyExited) {
      if (!isMobileLandscape()) {
        revertInline();
      }
      return;
    }
    if (isMobileLandscape()) {
      hideBanner();
      applyFullscreen();
      landscapeLocked = true;
    } else {
      if (isMobilePortrait()) {
        showBanner();
      } else {
        hideBanner();
      }
      revertInline();
    }
  }

  window.addEventListener('load', () => {
    const carouselWrapper = document.getElementById('carousel-wrapper');
    if (carouselWrapper) {
      carouselWrapper.addEventListener('click', () => {
        if (isMobileLandscape() && !landscapeLocked) {
          manuallyExited = false;
          applyFullscreen();
          landscapeLocked = true;
        }
      });
    }
    updateLayout();
    window.addEventListener('orientationchange', updateLayout);
    window.addEventListener('resize', updateLayout);

    const container = document.getElementById('carousel-container');
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');
    const slideNumber = document.getElementById('slide-number');
    if (!container || !prevBtn || !nextBtn || !slideNumber) return;
    const slides = Array.from(container.children);
    const totalSlides = slides.length;
    let currentSlide = 0;
    let isTransitioning = false;
    let lastClickTime = 0;
    const CLICK_DELAY = 400;

    function showSlide(idx) {
      if (idx < 0) idx = totalSlides - 1;
      if (idx >= totalSlides) idx = 0;
      currentSlide = idx;
      slides.forEach((slide, i) => {
        if (slide instanceof HTMLElement) {
          slide.style.transform = `translateX(${100 * (i - currentSlide)}%)`;
          slide.style.transition = 'transform 0.3s ease-out';
        }
      });
      slideNumber.textContent = `${currentSlide + 1} / ${totalSlides}`;
    }

    function handleButtonClick(direction) {
      const now = Date.now();
      if (isTransitioning || (now - lastClickTime) < CLICK_DELAY) return;
      isTransitioning = true;
      lastClickTime = now;
      showSlide(currentSlide + direction);
      setTimeout(() => {
        isTransitioning = false;
      }, CLICK_DELAY);
    }

    prevBtn.addEventListener('click', () => handleButtonClick(-1));
    nextBtn.addEventListener('click', () => handleButtonClick(1));

    let touchStartX = 0;
    let touchStartY = 0;
    let lastTouchY = 0;
    let isSwiping = false;
    let swipeDirection = null;
    const SWIPE_THRESHOLD = 50;
    const VERTICAL_SWIPE_THRESHOLD = 40;
    const MIN_VELOCITY = 0.5;

    container.addEventListener('touchstart', (e) => {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
      lastTouchY = touchStartY;
      isSwiping = true;
      swipeDirection = null;
    }, { passive: false });

    container.addEventListener('touchmove', (e) => {
      if (!isSwiping) return;
      const currentX = e.touches[0].clientX;
      const currentY = e.touches[0].clientY;
      const deltaX = currentX - touchStartX;
      const deltaY = currentY - touchStartY;
      const moveDistance = Math.abs(deltaY);
      if (!swipeDirection) {
        swipeDirection = Math.abs(deltaY) > Math.abs(deltaX) ? 'vertical' : 'horizontal';
      }
      if (landscapeLocked) {
        e.preventDefault();
        if (swipeDirection === 'vertical' && moveDistance > VERTICAL_SWIPE_THRESHOLD) {
          const velocity = Math.abs(currentY - lastTouchY);
          if (velocity > MIN_VELOCITY) {
            landscapeLocked = false;
            manuallyExited = true;
            revertInline();
            requestAnimationFrame(() => {
              const cards = document.getElementById('portfolio-cards');
              if (cards) {
                cards.scrollIntoView({ behavior: 'smooth', block: 'start' });
              }
            });
          }
        }
      }
      lastTouchY = currentY;
      if (swipeDirection === 'horizontal') {
        slides.forEach((slide, i) => {
          if (slide instanceof HTMLElement) {
            const offset = (i - currentSlide) * 100;
            slide.style.transform = `translateX(calc(${offset}% + ${deltaX}px))`;
            slide.style.transition = 'none';
          }
        });
      }
    }, { passive: false });

    container.addEventListener('touchend', (e) => {
      if (!isSwiping) return;
      isSwiping = false;
      const touchEndX = e.changedTouches[0].clientX;
      const deltaX = touchEndX - touchStartX;
      if (swipeDirection === 'horizontal') {
        slides.forEach((slide) => {
          if (slide instanceof HTMLElement) {
            slide.style.transition = 'transform 0.3s ease-out';
          }
        });
        if (Math.abs(deltaX) > SWIPE_THRESHOLD) {
          if (deltaX > 0) {
            showSlide(currentSlide - 1);
          } else {
            showSlide(currentSlide + 1);
          }
        } else {
          slides.forEach((slide, i) => {
            if (slide instanceof HTMLElement) {
              const offset = (i - currentSlide) * 100;
              slide.style.transform = `translateX(${offset}%)`;
            }
          });
        }
      }
      swipeDirection = null;
    });

    container.addEventListener('touchcancel', () => {
      if (!isSwiping) return;
      isSwiping = false;
      slides.forEach((slide, i) => {
        if (slide instanceof HTMLElement) {
          slide.style.transition = 'transform 0.3s ease-out';
          const offset = (i - currentSlide) * 100;
          slide.style.transform = `translateX(${offset}%)`;
        }
      });
    });

    showSlide(0);
  });

  const dismissBanner = document.getElementById('dismiss-banner');
  if (dismissBanner) {
    dismissBanner.addEventListener('click', () => {
      const banner = document.getElementById('rotate-banner');
      if (banner) banner.classList.add('hidden');
    });
  }
</script>