---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import { getProjects } from '../lib/portfolio';

// Fetch real projects or create placeholders:
const projects = await getProjects();
const placeholderProjects = projects.slice(0, 6);

// Alternatively, define your own placeholders:
// const placeholderProjects = Array.from({ length: 6 }, (_, i) => ({
//   title: `Placeholder ${i + 1}`,
//   images: ['/placeholder.jpg'],
//   description: 'Lorem ipsum dolor sit amet.'
// }));
---

<Layout title="Portfolio - Core Contracting">
  <!-- BANNER: optional, appears in portrait -->
  <div
    id="rotate-banner"
    class="hidden fixed top-0 left-0 w-full bg-yellow-300 text-black text-center p-3 z-[999]"
  >
    Please rotate your device to landscape for the best experience.
  </div>

  <!-- PAGE HEADING -->
  <h1 class="text-4xl font-serif font-bold text-center mt-20 mb-8">
    Our Portfolio
  </h1>

  <!-- 
    CAROUSEL SECTION
    - Desktop / mobile-portrait => inline
    - Mobile-landscape => fill screen (letterboxed with black bars)
      Wrapping it in a black container ensures leftover space is black, not white
  -->
  <section
    id="carousel-wrapper"
    class="relative transition-all duration-300 ease-in-out"
  >
    <div
      id="carousel-container"
      class="mx-auto flex overflow-hidden transition-transform duration-500 ease-in-out
             w-full h-64 relative bg-black" 
      style="touch-action: pan-y;"
    >
      <!-- 
        Letterboxing approach: `object-contain` + black background 
        so leftover space is black bars, not white.
      -->
      {placeholderProjects.map((project, i) => (
        <div class="shrink-0 w-full h-full flex justify-center items-center">
          <img
            src={project.images[0] ?? '/placeholder.jpg'}
            alt={`Project ${i + 1}`}
            class="object-contain h-full bg-black"
          />
        </div>
      ))}
    </div>

    <!-- Carousel arrows -->
    <div class="flex justify-center mt-2 gap-4">
      <button
        id="carousel-prev"
        class="px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded text-black dark:text-white"
      >
        &larr;
      </button>
      <button
        id="carousel-next"
        class="px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded text-black dark:text-white"
      >
        &rarr;
      </button>
    </div>
  </section>

  <!-- 6 PLACEHOLDER CARDS BELOW FOR TESTING -->
  <div
    id="portfolio-cards"
    class="container mx-auto px-4 py-12 transition-all duration-300 ease-in-out"
  >
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {placeholderProjects.map((p, index) => (
        <div
          key={index}
          class="bg-white dark:bg-primary-800 rounded-lg shadow-lg overflow-hidden"
        >
          <img
            src={p.images[0] ?? '/placeholder.jpg'}
            alt={p.title}
            class="w-full h-64 object-cover"
          />
          <div class="p-6">
            <h2 class="text-2xl font-bold mb-2">{p.title}</h2>
            <p class="text-primary-600 dark:text-primary-300 mb-4">
              {p.description ?? 'Lorem ipsum dolor sit amet.'}
            </p>
            <button
              class="bg-wood-dark hover:bg-wood text-white px-4 py-2 rounded-lg transition-colors"
            >
              View Project
            </button>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- (Optional) Modal or other site elements -->

</Layout>

<script>
  /* Basic orientation detection */
  function isMobilePortrait() {
    return (
      window.matchMedia('(max-width: 767px)').matches &&
      (window.orientation === 0 || window.orientation === 180)
    );
  }

  function isMobileLandscape() {
    return (
      window.matchMedia('(max-width: 767px)').matches &&
      (window.orientation === 90 || window.orientation === -90)
    );
  }

  let landscapeLocked = false;

  function showBanner() {
    document.getElementById('rotate-banner').classList.remove('hidden');
  }
  function hideBanner() {
    document.getElementById('rotate-banner').classList.add('hidden');
  }

  function applyFullscreen() {
    const wrapper = document.getElementById('carousel-wrapper');
    const container = document.getElementById('carousel-container');
    // Ensure leftover space is black
    wrapper.style.backgroundColor = 'black';

    // Fill the screen
    wrapper.style.position = 'fixed';
    wrapper.style.top = '0';
    wrapper.style.left = '0';
    wrapper.style.width = '100vw';
    wrapper.style.height = '100vh';
    wrapper.style.zIndex = '50';

    container.style.width = '100vw';
    container.style.height = '100vh';
  }

  function revertInline() {
    const wrapper = document.getElementById('carousel-wrapper');
    const container = document.getElementById('carousel-container');
    wrapper.style.backgroundColor = '';
    wrapper.style.position = '';
    wrapper.style.top = '';
    wrapper.style.left = '';
    wrapper.style.width = '';
    wrapper.style.height = '';
    wrapper.style.zIndex = '';

    container.style.width = '';
    container.style.height = '';
  }

  function updateLayout() {
    if (landscapeLocked) return;

    if (isMobileLandscape()) {
      hideBanner();
      applyFullscreen();
      landscapeLocked = true;
    } else {
      if (isMobilePortrait()) {
        showBanner();
      } else {
        hideBanner();
      }
      revertInline();
    }
  }

  document.addEventListener('astro:page-load', () => {
    updateLayout();
    window.addEventListener('orientationchange', updateLayout);
    window.addEventListener('resize', updateLayout);

    /* Simple carousel logic */
    let currentSlide = 0;
    const container = document.getElementById('carousel-container');
    const slides = container.children;
    const totalSlides = slides.length;
    const prevBtn = document.getElementById('carousel-prev');
    const nextBtn = document.getElementById('carousel-next');

    function showSlide(idx) {
      if (idx < 0) idx = totalSlides - 1;
      if (idx >= totalSlides) idx = 0;
      currentSlide = idx;
      container.style.transform = `translateX(-${100 * idx}%)`;
    }

    prevBtn.addEventListener('click', () => {
      showSlide(currentSlide - 1);
    });
    nextBtn.addEventListener('click', () => {
      showSlide(currentSlide + 1);
    });
    showSlide(0);

    /* If you want to allow a swipe-down to revert from fullscreen, e.g.: */
    let startY = null;
    const wrapper = document.getElementById('carousel-wrapper');
    wrapper.addEventListener('touchstart', (e) => {
      startY = e.touches[0].clientY;
    });
    wrapper.addEventListener('touchmove', (e) => {
      if (startY === null) return;
      const currentY = e.touches[0].clientY;
      const diff = startY - currentY;

      // "Deadzone" threshold
      if (diff < -80 && landscapeLocked) {
        landscapeLocked = false;
        revertInline();
      }
    });
    wrapper.addEventListener('touchend', () => {
      startY = null;
    });
  });
</script>